// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/interview_proxy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterviewProxy_VerifyCandidate_FullMethodName        = "/InterviewProxy/VerifyCandidate"
	InterviewProxy_JoinInterview_FullMethodName          = "/InterviewProxy/JoinInterview"
	InterviewProxy_PauseInterview_FullMethodName         = "/InterviewProxy/PauseInterview"
	InterviewProxy_ProcessIncomingMessage_FullMethodName = "/InterviewProxy/ProcessIncomingMessage"
)

// InterviewProxyClient is the client API for InterviewProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterviewProxyClient interface {
	// Unary
	VerifyCandidate(ctx context.Context, in *VerifyCandidateRequest, opts ...grpc.CallOption) (*VerificationResponse, error)
	JoinInterview(ctx context.Context, in *JoinInterviewRequest, opts ...grpc.CallOption) (*JoinInterviewResponse, error)
	PauseInterview(ctx context.Context, in *PauseInterviewRequest, opts ...grpc.CallOption) (*PauseInterviewResponse, error)
	// Bidirectional streaming
	ProcessIncomingMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InterviewMessage, InterviewMessage], error)
}

type interviewProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewProxyClient(cc grpc.ClientConnInterface) InterviewProxyClient {
	return &interviewProxyClient{cc}
}

func (c *interviewProxyClient) VerifyCandidate(ctx context.Context, in *VerifyCandidateRequest, opts ...grpc.CallOption) (*VerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerificationResponse)
	err := c.cc.Invoke(ctx, InterviewProxy_VerifyCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewProxyClient) JoinInterview(ctx context.Context, in *JoinInterviewRequest, opts ...grpc.CallOption) (*JoinInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinInterviewResponse)
	err := c.cc.Invoke(ctx, InterviewProxy_JoinInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewProxyClient) PauseInterview(ctx context.Context, in *PauseInterviewRequest, opts ...grpc.CallOption) (*PauseInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseInterviewResponse)
	err := c.cc.Invoke(ctx, InterviewProxy_PauseInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewProxyClient) ProcessIncomingMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InterviewMessage, InterviewMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InterviewProxy_ServiceDesc.Streams[0], InterviewProxy_ProcessIncomingMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InterviewMessage, InterviewMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InterviewProxy_ProcessIncomingMessageClient = grpc.BidiStreamingClient[InterviewMessage, InterviewMessage]

// InterviewProxyServer is the server API for InterviewProxy service.
// All implementations must embed UnimplementedInterviewProxyServer
// for forward compatibility.
type InterviewProxyServer interface {
	// Unary
	VerifyCandidate(context.Context, *VerifyCandidateRequest) (*VerificationResponse, error)
	JoinInterview(context.Context, *JoinInterviewRequest) (*JoinInterviewResponse, error)
	PauseInterview(context.Context, *PauseInterviewRequest) (*PauseInterviewResponse, error)
	// Bidirectional streaming
	ProcessIncomingMessage(grpc.BidiStreamingServer[InterviewMessage, InterviewMessage]) error
	mustEmbedUnimplementedInterviewProxyServer()
}

// UnimplementedInterviewProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterviewProxyServer struct{}

func (UnimplementedInterviewProxyServer) VerifyCandidate(context.Context, *VerifyCandidateRequest) (*VerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCandidate not implemented")
}
func (UnimplementedInterviewProxyServer) JoinInterview(context.Context, *JoinInterviewRequest) (*JoinInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinInterview not implemented")
}
func (UnimplementedInterviewProxyServer) PauseInterview(context.Context, *PauseInterviewRequest) (*PauseInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseInterview not implemented")
}
func (UnimplementedInterviewProxyServer) ProcessIncomingMessage(grpc.BidiStreamingServer[InterviewMessage, InterviewMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessIncomingMessage not implemented")
}
func (UnimplementedInterviewProxyServer) mustEmbedUnimplementedInterviewProxyServer() {}
func (UnimplementedInterviewProxyServer) testEmbeddedByValue()                        {}

// UnsafeInterviewProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterviewProxyServer will
// result in compilation errors.
type UnsafeInterviewProxyServer interface {
	mustEmbedUnimplementedInterviewProxyServer()
}

func RegisterInterviewProxyServer(s grpc.ServiceRegistrar, srv InterviewProxyServer) {
	// If the following call pancis, it indicates UnimplementedInterviewProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterviewProxy_ServiceDesc, srv)
}

func _InterviewProxy_VerifyCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewProxyServer).VerifyCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewProxy_VerifyCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewProxyServer).VerifyCandidate(ctx, req.(*VerifyCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewProxy_JoinInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewProxyServer).JoinInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewProxy_JoinInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewProxyServer).JoinInterview(ctx, req.(*JoinInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewProxy_PauseInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewProxyServer).PauseInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewProxy_PauseInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewProxyServer).PauseInterview(ctx, req.(*PauseInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewProxy_ProcessIncomingMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InterviewProxyServer).ProcessIncomingMessage(&grpc.GenericServerStream[InterviewMessage, InterviewMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InterviewProxy_ProcessIncomingMessageServer = grpc.BidiStreamingServer[InterviewMessage, InterviewMessage]

// InterviewProxy_ServiceDesc is the grpc.ServiceDesc for InterviewProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterviewProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InterviewProxy",
	HandlerType: (*InterviewProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyCandidate",
			Handler:    _InterviewProxy_VerifyCandidate_Handler,
		},
		{
			MethodName: "JoinInterview",
			Handler:    _InterviewProxy_JoinInterview_Handler,
		},
		{
			MethodName: "PauseInterview",
			Handler:    _InterviewProxy_PauseInterview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessIncomingMessage",
			Handler:       _InterviewProxy_ProcessIncomingMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/interview_proxy.proto",
}
