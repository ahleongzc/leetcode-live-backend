// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/ahleongzc/leetcode-live-backend/cmd/app"
	"github.com/ahleongzc/leetcode-live-backend/internal/background"
	"github.com/ahleongzc/leetcode-live-backend/internal/config"
	"github.com/ahleongzc/leetcode-live-backend/internal/consumer"
	"github.com/ahleongzc/leetcode-live-backend/internal/handler"
	"github.com/ahleongzc/leetcode-live-backend/internal/middleware"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo/cloudflare"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo/fasttext"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo/http"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo/postgres"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo/zerolog"
	"github.com/ahleongzc/leetcode-live-backend/internal/service"
)

// Injectors from wire.go:

func InitializeApplication() (*app.Application, error) {
	databaseConfig, err := config.LoadDatabaseConfig()
	if err != nil {
		return nil, err
	}
	db, err := postgres.NewPostgresDatabase(databaseConfig)
	if err != nil {
		return nil, err
	}
	sessionRepo := repo.NewSessionRepo(db)
	userRepo := repo.NewUserRepo(db)
	authService := service.NewAuthService(sessionRepo, userRepo)
	authHandler := handler.NewAuthHandler(authService)
	userService := service.NewUserService(userRepo)
	userHandler := handler.NewUserHandler(userService)
	healthHandler := handler.NewHealthHandler()
	websocketConfig := config.LoadWebsocketConfig()
	reviewRepo := repo.NewReviewRepo(db)
	interviewRepo := repo.NewInterviewRepo(db)
	transcriptRepo := repo.NewTranscriptRepo(db)
	transcriptManager := service.NewTranscriptManager(transcriptRepo)
	llmConfig, err := config.LoadLLMConfig()
	if err != nil {
		return nil, err
	}
	client := http.NewHTTPCLient()
	llmRepo, err := repo.NewLLMRepo(llmConfig, client)
	if err != nil {
		return nil, err
	}
	reviewService := service.NewReviewService(reviewRepo, interviewRepo, transcriptManager, llmRepo)
	questionRepo := repo.NewQuestionRepo(db)
	questionService := service.NewQuestionService(questionRepo)
	ttsConfig, err := config.LoadTTSConfig()
	if err != nil {
		return nil, err
	}
	ttsRepo, err := repo.NewTTSRepo(ttsConfig, client)
	if err != nil {
		return nil, err
	}
	objectStorageConfig, err := config.LoadObjectStorageConfig()
	if err != nil {
		return nil, err
	}
	s3Client, err := cloudflare.NewCloudflareR2ObjectStorageClient(objectStorageConfig)
	if err != nil {
		return nil, err
	}
	fileRepo := repo.NewFileRepo(s3Client, objectStorageConfig)
	messageQueueConfig, err := config.LoadMessageQueueConfig()
	if err != nil {
		return nil, err
	}
	messageQueueRepo := repo.NewMessageQueueRepo(messageQueueConfig)
	intentClassificationConfig, err := config.LoadIntentClassificationConfig()
	if err != nil {
		return nil, err
	}
	fastTextPool, err := fasttext.NewFastTextPool(intentClassificationConfig)
	if err != nil {
		return nil, err
	}
	intentClassificationRepo := repo.NewIntentClassificationRepo(fastTextPool)
	interviewService := service.NewInterviewService(authService, reviewService, questionService, transcriptManager, ttsRepo, llmRepo, fileRepo, reviewRepo, questionRepo, interviewRepo, messageQueueRepo, intentClassificationRepo)
	logger := zerolog.NewZerologLogger()
	interviewHandler := handler.NewInterviewHandler(websocketConfig, authService, interviewService, logger)
	middlewareMiddleware := middleware.NewMiddleware(authService, logger)
	reviewConsumer := consumer.NewReviewConsumer(reviewService, messageQueueRepo, logger)
	houseKeeper := background.NewHouseKeeper(sessionRepo, logger)
	inMemoryQueueConfig, err := config.LoadInMemoryQueueConfig()
	if err != nil {
		return nil, err
	}
	inMemoryCallbackQueueRepo := repo.NewInMemoryCallbackQueueRepo(inMemoryQueueConfig)
	workerPool := background.NewWorkerPool(inMemoryCallbackQueueRepo, logger)
	application := app.NewApplication(authHandler, userHandler, healthHandler, interviewHandler, middlewareMiddleware, reviewConsumer, houseKeeper, workerPool)
	return application, nil
}
