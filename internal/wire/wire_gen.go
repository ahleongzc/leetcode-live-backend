// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/ahleongzc/leetcode-live-backend/cmd/app"
	"github.com/ahleongzc/leetcode-live-backend/internal/background"
	"github.com/ahleongzc/leetcode-live-backend/internal/config"
	"github.com/ahleongzc/leetcode-live-backend/internal/consumer"
	"github.com/ahleongzc/leetcode-live-backend/internal/handler"
	"github.com/ahleongzc/leetcode-live-backend/internal/infra"
	"github.com/ahleongzc/leetcode-live-backend/internal/infra/llm"
	"github.com/ahleongzc/leetcode-live-backend/internal/infra/message_queue"
	"github.com/ahleongzc/leetcode-live-backend/internal/infra/tts"
	"github.com/ahleongzc/leetcode-live-backend/internal/middleware"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo"
	"github.com/ahleongzc/leetcode-live-backend/internal/scenario"
	"github.com/ahleongzc/leetcode-live-backend/internal/service"
)

// Injectors from wire.go:

func InitializeApplication() (*app.Application, error) {
	authScenario := scenario.NewAuthScenario()
	databaseConfig, err := config.LoadDatabaseConfig()
	if err != nil {
		return nil, err
	}
	db, err := infra.NewPostgresDatabase(databaseConfig)
	if err != nil {
		return nil, err
	}
	sessionRepo := repo.NewSessionRepo(db)
	userRepo := repo.NewUserRepo(db)
	authService := service.NewAuthService(authScenario, sessionRepo, userRepo)
	authHandler := handler.NewAuthHandler(authService)
	userService := service.NewUserService(userRepo)
	userHandler := handler.NewUserHandler(userService)
	healthHandler := handler.NewHealthHandler()
	websocketConfig := config.LoadWebsocketConfig()
	reviewRepo := repo.NewReviewRepo(db)
	interviewRepo := repo.NewInterviewRepo(db)
	transcriptRepo := repo.NewTranscriptRepo(db)
	transcriptManager := scenario.NewTranscriptManager(transcriptRepo)
	llmConfig, err := config.LoadLLMConfig()
	if err != nil {
		return nil, err
	}
	client := infra.NewHTTPCLient()
	llmLLM, err := llm.NewLLM(llmConfig, client)
	if err != nil {
		return nil, err
	}
	reviewScenario := scenario.NewReviewScenario(reviewRepo, interviewRepo, transcriptManager, llmLLM)
	questionRepo := repo.NewQuestionRepo(db)
	objectStorageConfig, err := config.LoadObjectStorageConfig()
	if err != nil {
		return nil, err
	}
	s3Client, err := infra.NewCloudflareR2ObjectStorageClient(objectStorageConfig)
	if err != nil {
		return nil, err
	}
	fileRepo := repo.NewFileRepo(s3Client, objectStorageConfig)
	messageQueueConfig, err := config.LoadMessageQueueConfig()
	if err != nil {
		return nil, err
	}
	messageQueue := messagequeue.NewMessageQueue(messageQueueConfig)
	ttsConfig, err := config.LoadTTSConfig()
	if err != nil {
		return nil, err
	}
	ttsTTS, err := tts.NewTTS(ttsConfig, client)
	if err != nil {
		return nil, err
	}
	interviewScenario := scenario.NewInterviewScenario(reviewScenario, transcriptManager, questionRepo, interviewRepo, fileRepo, messageQueue, llmLLM, ttsTTS)
	questionScenario := scenario.NewQuestionScenario(questionRepo)
	intentClassifier := scenario.NewIntentClassifier()
	interviewService := service.NewInterviewService(interviewScenario, reviewScenario, authScenario, questionScenario, intentClassifier, transcriptManager, interviewRepo, reviewRepo, questionRepo)
	logger := infra.NewZerologLogger()
	interviewHandler := handler.NewInterviewHandler(websocketConfig, authService, interviewService, logger)
	middlewareMiddleware := middleware.NewMiddleware(authService, logger)
	reviewConsumer := consumer.NewReviewConsumer(reviewScenario, messageQueue, logger)
	houseKeeper := background.NewHouseKeeper(sessionRepo, logger)
	inMemoryQueueConfig, err := config.LoadInMemoryQueueConfig()
	if err != nil {
		return nil, err
	}
	inMemoryCallbackQueue := infra.NewInMemoryCallbackQueue(inMemoryQueueConfig)
	workerPool := background.NewWorkerPool(inMemoryCallbackQueue, logger)
	application := app.NewApplication(authHandler, userHandler, healthHandler, interviewHandler, middlewareMiddleware, reviewConsumer, houseKeeper, workerPool)
	return application, nil
}
