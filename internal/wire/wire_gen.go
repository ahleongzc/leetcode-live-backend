// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/ahleongzc/leetcode-live-backend/cmd/app"
	"github.com/ahleongzc/leetcode-live-backend/internal/background"
	"github.com/ahleongzc/leetcode-live-backend/internal/config"
	"github.com/ahleongzc/leetcode-live-backend/internal/handler"
	"github.com/ahleongzc/leetcode-live-backend/internal/infra"
	"github.com/ahleongzc/leetcode-live-backend/internal/middleware"
	"github.com/ahleongzc/leetcode-live-backend/internal/repo"
	"github.com/ahleongzc/leetcode-live-backend/internal/scenario"
	"github.com/ahleongzc/leetcode-live-backend/internal/service"
)

// Injectors from wire.go:

func InitializeApplication() (*app.Application, error) {
	databaseConfig, err := config.LoadDatabaseConfig()
	if err != nil {
		return nil, err
	}
	db, err := infra.NewPostgresDatabase(databaseConfig)
	if err != nil {
		return nil, err
	}
	sessionRepo := repo.NewSessionRepo(db)
	userRepo := repo.NewUserRepo(db)
	authService := service.NewAuthService(sessionRepo, userRepo)
	authHandler := handler.NewAuthHandler(authService)
	healthHandler := handler.NewHealthHandler()
	websocketConfig := config.LoadWebsocketConfig()
	llmConfig, err := config.LoadLLMConfig()
	if err != nil {
		return nil, err
	}
	client := infra.NewHTTPCLient()
	llm, err := infra.NewLLM(llmConfig, client)
	if err != nil {
		return nil, err
	}
	interviewRepo := repo.NewInterviewRepo(db)
	objectStorageConfig, err := config.LoadObjectStorageConfig()
	if err != nil {
		return nil, err
	}
	s3Client, err := infra.NewCloudflareR2ObjectStorageClient(objectStorageConfig)
	if err != nil {
		return nil, err
	}
	fileRepo := repo.NewFileRepo(s3Client, objectStorageConfig)
	authScenario := scenario.NewAuthScenario(userRepo, sessionRepo)
	transcriptRepo := repo.NewTranscriptRepo(db)
	transcriptManager := scenario.NewTranscriptManager(transcriptRepo)
	intentClassifier := scenario.NewIntentClassifier()
	ttsConfig, err := config.LoadTTSConfig()
	if err != nil {
		return nil, err
	}
	tts, err := infra.NewTTS(ttsConfig, client)
	if err != nil {
		return nil, err
	}
	interviewService := service.NewInterviewService(llm, interviewRepo, fileRepo, authScenario, transcriptManager, intentClassifier, tts)
	logger := infra.NewZerologLogger()
	interviewHandler := handler.NewInterviewHandler(websocketConfig, authService, interviewService, logger)
	middlewareMiddleware := middleware.NewMiddleware(logger)
	houseKeeper := background.NewHouseKeeper(sessionRepo, logger)
	application := app.NewApplication(authHandler, healthHandler, interviewHandler, middlewareMiddleware, houseKeeper)
	return application, nil
}
